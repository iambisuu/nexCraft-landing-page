---
// TestimonialMarquee.astro
const testimonials = [
  {
    name: "Qadira",
    text: "\"We couldn't be happier with our new e-commerce platform. The team created a beautiful, intuitive site that not only showcases our products but also makes shopping a pleasure for our customers. Since launching, we've seen a noticeable increase in both traffic and revenue. They truly helped us create the seamless experience we envisioned.\""
  },
  {
    name: "PredictHer",
    text: "\"The UI/UX design this team crafted has transformed our reach and significantly enhanced our user experience. Their expertise brought our vision to life, enabling us to empower more women through an intuitive and seamless health tracking experience. Thanks to their work, we now have a visually engaging and user-centered platform that resonates with our mission and audience.\""
  },
  {
    name: "Quil and Coin",
    text: "\"Partnering with this team was one of the best decisions we made. They created a sleek, user-friendly website that captures our mission perfectly. Now, registration and payment processes are fully streamlined, allowing our clients to focus on their events while we handle the details behind the scenes. This website has truly elevated our business, making it easier than ever for us to deliver on our promise.\""
  }
];

// Duplicate testimonials for continuous scrolling
const allTestimonials = [...testimonials, ...testimonials, ...testimonials, ...testimonials];
---

<div class="relative w-full h-screen p-16 mt-20 bg-cover bg-center overflow-hidden" style="background-image: url('/bg-2.png');">
  <div class="mb-8">
    <h1 class="font-black text-5xl uppercase tracking-tight leading-none md:text-6xl">
      What People <span class="text-[#f4813f]">Say</span>
    </h1>
  </div>
  
  <div class="marquee-container relative mt-32 overflow-hidden">
    <div id="testimonial-marquee" class="marquee-content flex gap-12">
      {allTestimonials.map((testimonial) => (
        <div class="testimonial-card relative bg-white rounded-3xl p-6 min-w-[300px] max-w-[350px] flex-none shadow-md border border-gray-100">
          <div class="absolute text-[#f4813f] text-7xl font-serif leading-none top-1 left-3">"</div>
          <div class="pt-6">
            <h3 class="text-xl font-bold mb-2">{testimonial.name}</h3>
            <p class="text-sm leading-relaxed text-gray-800">{testimonial.text}</p>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  <div class="flex justify-center gap-4 mt-8">
    <button id="toggle-mode-btn" aria-label="Toggle auto-scroll mode" class="bg-[#f4813f] text-white rounded-full px-4 py-2 flex items-center justify-center text-sm hover:bg-[#e87020] transition-colors">
      Auto-Scroll: <span id="mode-status" class="ml-1">ON</span>
    </button>
  </div>
</div>

<script>
  declare global {
    interface Window {
      lastScrollY: number;
      previousScrollY: number;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const marquee = document.getElementById('testimonial-marquee');
    const toggleModeBtn = document.getElementById('toggle-mode-btn');
    const modeStatus = document.getElementById('mode-status');
    
    // Safely handle null checks
    if (!marquee || !toggleModeBtn || !modeStatus) {
      console.error("Required elements not found");
      return;
    }
    
    // Scroll variables
    let isAutoScrollMode = false; // Start with auto-scrolling enabled
    let scrollPosition = 0;
    let scrollSpeed = 1; // Default scroll speed (pixels per animation frame)
    let isScrolling = false;
    let scrollTimeout: number | null = null;
    let animationFrame: number | null = null;
    
    // Set initial mode
    updateScrollMode(isAutoScrollMode);
    
    // Toggle between auto-scroll and scroll-driven modes
    toggleModeBtn.addEventListener('click', () => {
      isAutoScrollMode = !isAutoScrollMode;
      updateScrollMode(isAutoScrollMode);
    });
    
    function updateScrollMode(autoMode: boolean) {
      if (autoMode) {
        // Enable auto scrolling
        modeStatus!.textContent = "ON";
        startAutoScroll();
      } else {
        // Disable auto scrolling, only scroll with user input
        modeStatus!.textContent = "OFF";
        stopAutoScroll();
      }
    }
    
    function startAutoScroll() {
      // Cancel any existing animation
      if (animationFrame) {
        cancelAnimationFrame(animationFrame);
      }
      
      // Remove any transform to reset position
      marquee!.style.transform = "";
      // Add CSS animation
      marquee!.style.animation = "marquee 30s linear infinite";
      
      // Remove scroll event listeners when in auto mode
      window.removeEventListener('scroll', handleScroll);
    }
    
    function stopAutoScroll() {
      // Stop CSS animation
      marquee!.style.animation = "none";
      
      // Add scroll event listeners for scroll-driven mode
      window.addEventListener('scroll', handleScroll);
      
      // Initialize position
      scrollPosition = 0;
      marquee!.style.transform = `translateX(0px)`;
    }
    
    // Handle scroll events for scroll-driven mode
    function handleScroll() {
      if (isAutoScrollMode) return;
      
      const scrollDelta = window.scrollY - (window.lastScrollY || 0);
      window.lastScrollY = window.scrollY;
      
      // Determine scroll direction and adjust marquee position
      scrollPosition -= scrollDelta * 2; // Amplify scroll effect
      
      // Check if we need to reset the position for infinite scroll effect
      const marqueeWidth = marquee!.scrollWidth / 2;
      if (Math.abs(scrollPosition) > marqueeWidth) {
        scrollPosition = scrollPosition % marqueeWidth;
      }
      
      // Apply the transform
      marquee!.style.transform = `translateX(${scrollPosition}px)`;
      
      // Track scrolling state for inertia
      isScrolling = true;
      
      // Clear existing timeout
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }
      
      // Set timeout to detect when scrolling stops
      scrollTimeout = setTimeout(() => {
        isScrolling = false;
        
        // Optional: Add inertia after scrolling stops
        if (!isAutoScrollMode) {
          applyScrollInertia();
        }
      }, 150) as unknown as number;
    }
    
    // Add inertia effect after user stops scrolling
    function applyScrollInertia() {
      if (isAutoScrollMode || isScrolling) return;
      
      // Get the last scroll delta to determine direction and speed
      const lastScrollDelta = window.scrollY - (window.previousScrollY || window.scrollY);
      window.previousScrollY = window.scrollY;
      
      // Calculate inertia based on last scroll speed
      let inertia = Math.sign(lastScrollDelta) * Math.min(Math.abs(lastScrollDelta * 0.5), 10);
      let frameCount = 0;
      
      // Apply gradual slowdown
      function applyInertiaFrame() {
        frameCount++;
        
        if (Math.abs(inertia) > 0.1 && frameCount < 60) {
          scrollPosition -= inertia;
          
          // Check boundaries for infinite scroll
          const marqueeWidth = marquee!.scrollWidth / 2;
          if (Math.abs(scrollPosition) > marqueeWidth) {
            scrollPosition = scrollPosition % marqueeWidth;
          }
          
          // Apply the transform
          marquee!.style.transform = `translateX(${scrollPosition}px)`;
          
          // Reduce inertia gradually
          inertia *= 0.95;
          
          // Continue animation
          animationFrame = requestAnimationFrame(applyInertiaFrame);
        }
      }
      
      // Start inertia animation
      if (Math.abs(lastScrollDelta) > 5) {
        if (animationFrame) {
          cancelAnimationFrame(animationFrame);
        }
        animationFrame = requestAnimationFrame(applyInertiaFrame);
      }
    }
    
    // Initialize
    if (isAutoScrollMode) {
      startAutoScroll();
    } else {
      stopAutoScroll();
    }
    
    // TypeScript declarations for window properties
    declare global {
      interface Window {
        lastScrollY: number;
        previousScrollY: number;
      }
    }
  });
</script>

<style>
  .marquee-container {
    width: 100%;
    overflow: hidden;
  }
  
  .marquee-content {
    display: flex;
    gap: 3rem;
    will-change: transform;
  }
  
  @keyframes marquee {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%); /* Move by half the content to create seamless loop */
    }
  }
  
  /* For responsive design */
  @media (max-width: 768px) {
    .marquee-content {
      gap: 1.5rem;
    }
  }
</style>